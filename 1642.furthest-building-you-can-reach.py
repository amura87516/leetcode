#
# @lc app=leetcode id=1642 lang=python3
#
# [1642] Furthest Building You Can Reach
#

# @lc code=start
class Solution:
    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        def binary_search(nums, target):
            left = 0
            right = len(nums)-1
            while left <= right:
                mid = (right - left)//2 + left
                if nums[mid] == target:
                    return mid
                elif nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return left

        diffs = []
        total_diff = 0
        total_maxinum_diff = 0
        # O(nlogn)
        for i in range(1, len(heights)):
            diff = heights[i] - heights[i-1]
            if diff > 0:
                # insert diff to diffs
                index = binary_search(diffs, diff)
                total_diff += diff
                if len(diffs)-index < ladders:
                    if len(diffs)-ladders >= 0:
                        total_maxinum_diff -= diffs[-ladders]
                    total_maxinum_diff += diff
                diffs.insert(index, diff)

                if total_diff - total_maxinum_diff  > bricks:
                    return i-1
        return len(heights)-1
# @lc code=end
[4,12,2,7,3,18,20,3,19]\n10\n2
[14,3,19,3]\n17\n0
[1,5,1,2,3,4,10000]\n4\n1
[489802,364169,742274,973483,807739,253747,564636]\n999\n3
[489802,364169,742274,973483,807739,253747,564636,472387,598445,675408,626061,527760,922748,244691,41163,108095,953208,54400,191957,182321,801110,526756,11220,560896,782344,565351,570890,931781,511665,108738,357367,853555,674526,388790,686349,554731,102668,335287,461231,496065,489980,525209,693696,140598,784402,564477,743153,156379,370768,94810,121932,338323,972441,553422,865236,627884,673412,16147,858309,802780,150410,657225,761430,916149,644587,364929,661236,207648,507409,209803,663553,296241,51843,758342,448408,310536,733500,390516,580506,313748,729366,961156,766804,752158,713426,946971,433800,611365,806559,950149,831368,871881,132092,644626,150762,487527,365094,316637,684249,740162,605893,272845,416251,905202,984909,602362,424697,686193,566240,159584,600277,767037,211677,441897,586509,965864,393340,497044,881539,145921,159055,866123,603476,657682,284714,85306,470415,534245,641462,472616,159434,421500,843442,634366,625668,444943,657933,129173,914540,215272,598415,457087,437568,490742,172811,212016,435680,599042,789308,279873,689943,369130,618428,524390,877649,118759,60586,37618,20797,492854,946585,583767,944693,62988,358292,708659,23496,966718,557539,131703,358231,215464,771609,375770,855917,147866,543477,786910,760512,468183,542081,373398,979543,126508,361409,842847,872593,746682,893518,457222,978730,161753,697245,205997,363180,807952,795175,808090,462585,658667,186220,858457,923762,700792,294201,584816,514737,261038,327627,205592,221896,444108,979369,129394,44001,790354,353917,72772,330118,360651,635275,849492,966042,843108,158554,406317,995111,147752,121006,486157,678653,217657,4288,573547,820817,164534,921608]\n33671263\n108
[1,2]\n0\n0